# bot_logic.py - –ú–æ–∑–≥ - —Ä–∞–∑–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è / payload –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç (text, keyboard)
# ---------------------------------------------------------------------
import json
import re
from pathlib import Path
from typing import Tuple, Optional, List, Dict, Any

from source.keyboards import (  # –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–±—Ä–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    kb_main_menu,
    kb_find_menu,
    kb_faq_page,
    kb_directions_menu,
    kb_durations_menu,
    kb_projects_page,
    make_btn,
    SECONDARY,
    NEGATIVE
)

from source.bot_data import (
    DEFAULT_FALLBACK_MESSAGE,
    CONTACTS_TEXT,
    BAD_WORDS_WARNING,
    contains_bad_words,
    WELCOME_MESSAGE_AFTER_START
)

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–µ–∫—Ç—ã + FAQ)
# ---------------------------------------------------------------------
ROOT = Path(__file__).resolve().parent        # source/
DATA_DIR = ROOT.parent / "data"               # ‚Ä¶/Data

KB_PATH = DATA_DIR / "knowledge_base.json"
FAQ_PATH = DATA_DIR / "faq.json"

with KB_PATH.open(encoding="utf-8") as f:
    KB_RAW = json.load(f)

PROJECTS: List[Dict[str, Any]] = KB_RAW["available_projects"]
FILTERS = KB_RAW["available_filters"]
DIRECTIONS = FILTERS["directions"]
DURATIONS = FILTERS["durations"]

PAGE_SIZE = 5  # —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É

with FAQ_PATH.open(encoding="utf-8") as f:
    _faq_list = json.load(f)["available_answered_questions"]

FAQ_LIST: List[dict] = _faq_list  # —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
FAQ_BY_ID: Dict[int, str] = {i: item["answer"] for i, item in enumerate(FAQ_LIST)}

# ---------------------------------------------------------------------
# 2. –£—Ç–∏–ª–∏—Ç—ã
# ---------------------------------------------------------------------


def normalize(text: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã"""
    text = text.lower()
    text = re.sub(r"[^\w\s–∞-—è—ë\-]", " ", text)  # –≤—Å—ë, –∫—Ä–æ–º–µ –±—É–∫–≤/—Ü–∏—Ñ—Ä/–¥–µ—Ñ–∏—Å–∞ ‚Üí –ø—Ä–æ–±–µ–ª
    return re.sub(r"\s{2,}", " ", text).strip()


# def match_faq(text: str) -> Optional[str]:
#     """–ò—â–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ FAQ"""
#     lt = normalize(text)
#     for q, answer in FAQ_BY_ID.items():
#         if q in lt:
#             return answer
#     return None


# ---------------------------------------------------------------------
# 3. –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
# ---------------------------------------------------------------------


def list_projects_short(items: List[Dict[str, Any]], page: int) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç-—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–ª–∏
    –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    page_items = paginate(items, page)
    if not page_items:
        return "–ü–æ —ç—Ç–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å."
    start_idx = page * PAGE_SIZE + 1
    lines = [
        f"{idx}. {p['title']} ‚Äî {p['short_description']} \n"
        for idx, p in enumerate(page_items, start=start_idx)
    ]
    return "\n".join(lines)


def filter_projects(direction: str | None = None,
                    duration: str | None = None) -> List[Dict[str, Any]]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏/–∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    res = PROJECTS
    if direction:
        res = [p for p in res if p["direction"] == direction]
    if duration:
        res = [p for p in res if p["duration"] == duration]
    return res


def paginate(items: List[Any], page: int) -> List[Any]:
    start = page * PAGE_SIZE
    return items[start:start + PAGE_SIZE]


def format_project_card(p: Dict[str, Any]) -> str:
    return (
        f"{p['title']}\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {p['direction']}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {p['duration']}\n\n"
        f"{p['short_description']}\n\n"
        f"{p['full_description']}\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {p['link_to_project']}"
    )


# ---------------------------------------------------------------------
# 4. –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞: generate_keyboard_response
# ---------------------------------------------------------------------

def generate_keyboard_response(
        user_id: int,
        text: str,
        payload: Optional[dict] = None
) -> Tuple[str, Optional[str]]:
    """
    –ù–∞ –≤—Ö–æ–¥ ‚Äì user_id, —á–∏—Å—Ç—ã–π text, payload (dict –∏–ª–∏ None).
    –ù–∞ –≤—ã—Ö–æ–¥ ‚Äì (text_answer, keyboard_json_or_None)
    """

    # --------------------------------------------------------------
    # 0. –ï—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª payload (= –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É)
    # --------------------------------------------------------------
    if payload and isinstance(payload, dict) and payload.get("cmd"):
        return _handle_command(payload)

    # --------------------------------------------------------------
    # 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    # --------------------------------------------------------------
    greet_triggers = {"–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–Ω–∞—á–∞—Ç—å", "/start", "hi", "yfxfnm", "—Å—Ç–∞—Ä—Ç", "ghbdtn"}
    if normalize(text) in greet_triggers:
        return WELCOME_MESSAGE_AFTER_START, kb_main_menu()

    # --------------------------------------------------------------
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç
    # --------------------------------------------------------------

    if contains_bad_words(text):
        return BAD_WORDS_WARNING, None

    # --------------------------------------------------------------
    # 3. FAQ-–ø–æ–∏—Å–∫
    # --------------------------------------------------------------
    # faq_ans = match_faq(text)
    # if faq_ans:
    #     return faq_ans, None

    # --------------------------------------------------------------
    # 4. –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    # --------------------------------------------------------------

    words = normalize(text).split()
    if words:
        hits = [p for p in PROJECTS if any(w in p["title"].lower() for w in words)]
        if hits:
            first = hits[0]
            return format_project_card(first), None

    # --------------------------------------------------------------
    # 5. –§–æ–ª–±—ç–∫
    # --------------------------------------------------------------
    return DEFAULT_FALLBACK_MESSAGE, kb_main_menu()


# ---------------------------------------------------------------------
# 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ payload-–∫–æ–º–∞–Ω–¥
# ---------------------------------------------------------------------


def _handle_command(pl: dict) -> Tuple[str, Optional[str]]:
    cmd = pl["cmd"]
    depth = int(pl.get("depth", 0))
    data = pl.get("data") or {}

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if cmd in {"go_home"}:
        return "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", kb_main_menu()

    # –®–∞–≥ –Ω–∞–∑–∞–¥: bot_logic –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ depth-1
    if cmd in {"go_back"}:
        # depth —É–∂–µ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ 1 –≤ –∫–Ω–æ–ø–∫–µ
        direction = data.get("direction")
        duration = data.get("duration")
        page = int(data.get("page", 0))

        # –∫–æ—Ä–µ–Ω—å
        if depth <= 0:
            return "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", kb_main_menu()

        # depth==1 ‚Üí –º–µ–Ω—é ¬´–ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã?¬ª
        if depth == 1:
            return "–ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã?", kb_find_menu(depth=1)

        # depth==2  ‚Üí –º—ã –±—ã–ª–∏ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è/–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if depth == 2:
            if direction:
                return "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", kb_directions_menu(DIRECTIONS, depth=2)
            if duration:
                return "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", kb_durations_menu(DURATIONS, depth=2)
            # –≤–µ—Ä–Ω—É–ª–∏—Å—å –∏–∑ ¬´–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã¬ª
            return "–ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã?", kb_find_menu(depth=1)

        # depth‚â•3  ‚Üí –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ç–µ–º–∏ –∂–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        subset = filter_projects(direction, duration)
        listing = list_projects_short(subset, page)
        msg = f"–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Å—Ç—Ä. {page + 1}):\n{listing}"
        return msg, kb_projects_page(subset, page, PAGE_SIZE, depth=depth,
                                     extra_filter={k: v for k, v in data.items()
                                                   if k in {"direction", "duration"}})

    # --- —É—Ä–æ–≤–µ–Ω—å 0 ‚Üí 1 ---
    if cmd == "menu_find":
        return "–ö–∞–∫ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã?", kb_find_menu(depth=1)

    if cmd == "menu_faq":
        intro = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–ª–∏–∫–Ω—É–≤ –ø–æ –Ω–µ–º—É üëá"
        return intro, kb_faq_page(FAQ_LIST, page=0, page_size=PAGE_SIZE, depth=1)

    if cmd == "faq_page":
        page = int(data.get("page", 0))
        intro = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–ª–∏–∫–Ω—É–≤ –ø–æ –Ω–µ–º—É üëá"
        return intro, kb_faq_page(FAQ_LIST, page=page, page_size=PAGE_SIZE, depth=1)

    if cmd == "menu_help":
        return CONTACTS_TEXT, kb_main_menu()

    # --- —É—Ä–æ–≤–µ–Ω—å 1 ‚Üí 2 ---
    if cmd == "find_all_projects":
        page = int(data.get("page", 0))
        listing = list_projects_short(PROJECTS, page)
        text = f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):\n{listing}"
        return text, kb_projects_page(PROJECTS, page, PAGE_SIZE, depth=3, extra_filter={})  # depth=3 –∏–Ω–∞—á–µ
        # "–Ω–∞–∑–∞–¥" –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ—Å—Ç—ã–ª—å

    if cmd == "find_by_direction":
        return "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", kb_directions_menu(DIRECTIONS, depth=2)

    if cmd == "find_by_duration":
        return "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", kb_durations_menu(DURATIONS, depth=2)

    # --- —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è / –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---
    if cmd == "direction_selected":
        direction = data.get("value")
        page = int(data.get("page", 0))
        subset = filter_projects(direction=direction)
        listing = list_projects_short(subset, page)
        msg = f"–ü—Ä–æ–µ–∫—Ç—ã –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ¬´{direction}¬ª (—Å—Ç—Ä. {page + 1}):\n{listing}"
        return msg, kb_projects_page(subset, page, PAGE_SIZE, depth=3,
                                     extra_filter={"direction": direction})

    if cmd == "duration_selected":
        duration = data.get("value")
        page = int(data.get("page", 0))
        subset = filter_projects(duration=duration)
        listing = list_projects_short(subset, page)
        msg = f"–ü—Ä–æ–µ–∫—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é ¬´{duration}¬ª (—Å—Ç—Ä. {page + 1}):\n{listing}"
        return msg, kb_projects_page(subset, page, PAGE_SIZE, depth=3,
                                     extra_filter={"duration": duration})

    # --- –ø–∞–≥–∏–Ω–∞—Ü–∏—è ---
    if cmd == "projects_page":
        page = int(data.get("page", 0))
        direction = data.get("direction")
        duration = data.get("duration")
        subset = filter_projects(direction, duration)
        listing = list_projects_short(subset, page)
        text = f"–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Å—Ç—Ä. {page + 1}):\n{listing}"
        return text, kb_projects_page(subset, page, PAGE_SIZE, depth=3,
                                      extra_filter={"direction": direction,
                                                    "duration": duration})

    # --- –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ ---
    if cmd == "project_details":
        title = data.get("title")
        page = int(data.get("page", 0))
        direction = data.get("direction")
        duration = data.get("duration")
        proj = next((p for p in PROJECTS if p["title"] == title), None)

        if proj is None:
            return "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ü§∑‚Äç‚ôÇÔ∏è", kb_main_menu()

        msg = (
            f"–ü—Ä–æ–µ–∫—Ç - {proj['title']}\n\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {proj['direction']}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {proj['duration']}\n\n"
            f"{proj['full_description']}\n\n"
            f"–°—Å—ã–ª–∫–∞: {proj['link_to_project']}"
        )

        # --------- –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª + ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª -------------
        ctx = {
            "page": page,
            **({"direction": direction} if direction else {}),
            **({"duration": duration} if duration else {})
        }

        tail = [
            make_btn(
                "–ù–∞–∑–∞–¥",
                cmd="go_back",
                depth=depth,  # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–π –∂–µ –≥–ª—É–±–∏–Ω–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤!
                color=NEGATIVE,
                data=ctx  # –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            ),
            make_btn(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                cmd="go_home",
                depth=0,
                color=SECONDARY
            )
        ]

        kb = json.dumps({"buttons": [tail], "one_time": False}, ensure_ascii=False)
        return msg, kb

    if cmd == "faq_answer":
        idx = int(data.get("id", -1))
        answer = FAQ_BY_ID.get(idx, DEFAULT_FALLBACK_MESSAGE)
        question = FAQ_LIST[idx]["question"]
        msg = f"{question}\n\n{answer}"
        return msg, None  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    return DEFAULT_FALLBACK_MESSAGE, kb_main_menu()
