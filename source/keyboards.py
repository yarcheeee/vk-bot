# keyboards.py
# –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã VK.
# --------------------------------------------------------------------
import json  # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º dict -> JSON-—Å—Ç—Ä–æ–∫—É
from typing import List, Dict, Any  # –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–∏–ø–æ–≤

# VK –ø–æ–Ω–∏–º–∞–µ—Ç —á–µ—Ç—ã—Ä–µ —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–æ–∫: primary / secondary / positive / negative
Color = str  # –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞–ø–∏—Å–∏
PRIMARY = "primary"
SECONDARY = "secondary"
POSITIVE = "positive"
NEGATIVE = "negative"

# –ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å - UX-—É–ª—É—á—à–µ–Ω–∏–µ - –õ–∏—Å—Ç–∞–ª–∫–∏ FAQ/–ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–µ–π—á–∞—Å ¬´–≤–∏—Å—è—Ç¬ª –≤–Ω–∏–∑—É –¥–æ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ª–æ–≥–∞.
# –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å
# make_kb_inline –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è —Å—Ç—Ä–µ–ª–æ–∫ ‚Äî –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –∏—Å—á–µ–∑–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
# def make_kb_inline(rows):
# return json.dumps({"inline": True, "buttons": rows}, ensure_ascii=False)


def _paginate(items: list, page: int, page_size: int):
    max_page = max((len(items) - 1) // page_size, 0)
    page = max(0, min(page, max_page))
    start = page * page_size
    return items[start:start + page_size]


# --------------------------------------------------------------------
# 1. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫
# --------------------------------------------------------------------


def make_btn(
        label: str,  # –Ω–∞–¥–ø–∏—Å—å –Ω–∞ –∫–Ω–æ–ø–∫–µ
        cmd: str,  # –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é —É–≤–∏–¥–∏—Ç bot_logic
        depth: int = 0,  # —Ç–µ–∫—É—â–∞—è ¬´–≥–ª—É–±–∏–Ω–∞¬ª –º–µ–Ω—é
        color: Color = PRIMARY,  # —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏–Ω–∏–π)
        data: Dict[str, Any] | None = None  # –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ payload'–∞
) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –≤ —Ñ–æ—Ä–º–∞—Ç–µ VK ¬´–≥–æ—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞¬ª.
    """
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º payload, –∫–æ—Ç–æ—Ä—ã–π —É–π–¥—ë—Ç –±–æ—Ç-–ª–æ–≥–∏–∫–µ
    payload: Dict[str, Any] = {"cmd": cmd, "depth": depth}
    if data:  # –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ‚Ä¶
        payload["data"] = data  # ‚Ä¶–¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö

    return {
        "action": {
            "type": "text",  # –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞-—Ç–µ–∫—Å—Ç
            "label": label,  # –ø–æ–¥–ø–∏—Å—å
            "payload": json.dumps(payload, ensure_ascii=False)  # JSON-payload
        },
        "color": color  # —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
    }


# --------------------------------------------------------------------
# 2. –û–±—ë—Ä—Ç–∫–∞: —Å–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤ -> JSON-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
# --------------------------------------------------------------------


def make_kb(rows: List[List[Dict[str, Any]]],
            one_time: bool = False) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É-JSON,
    –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–ø—Ä—è–º—É—é –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ messages.send(..., keyboard=...)
    """
    kb_dict = {"one_time": one_time, "buttons": rows}  # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã VK
    return json.dumps(kb_dict, ensure_ascii=False)  # —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Å—Ç—Ä–æ–∫—É


# --------------------------------------------------------------------
# 3. –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–≤–æ—Å—Ç (¬´–ù–∞–∑–∞–¥¬ª / ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª)
# --------------------------------------------------------------------


def nav_tail(depth: int) -> List[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–ª—É–±–∏–Ω—ã.
    depth = 0  -> []
    depth = 1  -> [–ù–∞–∑–∞–¥]
    depth >=2  -> [–ù–∞–∑–∞–¥, –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é]
    """
    buttons: List[Dict[str, Any]] = []

    if depth >= 1:
        buttons.append(
            make_btn("üîô –ù–∞–∑–∞–¥", cmd="go_back",
                     depth=max(depth - 1, 0),  # —É–º–µ–Ω—å—à–∞–µ–º –≥–ª—É–±–∏–Ω—É –Ω–∞ 1
                     color=NEGATIVE)
        )

    if depth >= 2:
        buttons.append(
            make_btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", cmd="go_home",
                     depth=0,  # –ø—Ä—ã–∂–æ–∫ –≤ –∫–æ—Ä–µ–Ω—å
                     color=SECONDARY)
        )

    return buttons  # –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫


# --------------------------------------------------------------------
# 4. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–æ—Ä–µ–Ω—å, depth = 0)
# --------------------------------------------------------------------


def kb_main_menu() -> str:
    """
    –ö–æ—Ä–Ω–µ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä—É—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ /start.
    depth = 0, –ø–æ—ç—Ç–æ–º—É –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç.
    """
    rows: List[List[Dict[str, Any]]] = [
        [make_btn("üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç—ã",
                  cmd="menu_find",
                  depth=0,
                  color=PRIMARY)],

        [make_btn("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)",
                  cmd="menu_faq",
                  depth=0,
                  color=SECONDARY)],

        [make_btn("‚òéÔ∏è –ü–æ–º–æ—â—å / –ö–æ–Ω—Ç–∞–∫—Ç—ã",
                  cmd="menu_help",
                  depth=0,
                  color=SECONDARY)]
    ]

    return make_kb(rows)


# --------------------------------------------------------------------
# 5. –ú–µ–Ω—é ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç—ã¬ª (depth = 1)
# --------------------------------------------------------------------


def kb_find_menu(depth: int = 1) -> str:
    """
    –≠–∫—Ä–∞–Ω, –ø–æ—è–≤–ª—è—é—â–∏–π—Å—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç—ã¬ª.
    –ü—Ä–∏–Ω–∏–º–∞–µ–º depth (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1), —á—Ç–æ–±—ã —Ö–≤–æ—Å—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
    """
    rows: List[List[Dict[str, Any]]] = [[make_btn("üóÇÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã",
                                                  cmd="find_all_projects",
                                                  depth=depth,
                                                  data={"page": 0})],
                                        [make_btn("–ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é",
                                                  cmd="find_by_direction",
                                                  depth=depth)],
                                        [make_btn("–ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                                                  cmd="find_by_duration",
                                                  depth=depth)], nav_tail(depth)]

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ö–≤–æ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (¬´–ù–∞–∑–∞–¥¬ª –ø–æ—è–≤–∏—Ç—Å—è, ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª ‚Äî –Ω–µ—Ç)

    return make_kb(rows)


# ---------------------------------------------------------------------
# 6. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------------------------------------------------------


def kb_faq_page(faq_list: List[dict],
                page: int,
                page_size: int,
                depth: int = 1) -> str:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ FAQ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (page ‚â• 0).
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ‚â§5 –≤–æ–ø—Ä–æ—Å–æ–≤ + –Ω–∞–≤–∏–≥–∞—Ü–∏—é.
    """

    start = page * page_size
    slice_ = faq_list[start:start + page_size]
    max_page = (len(faq_list) - 1) // page_size
    rows: List[List[Dict[str, Any]]] = [
        [make_btn(
            label=str(item["question"])[:35] + "‚Ä¶" if len(item["question"]) > 35 else item["question"],
            cmd="faq_answer",
            depth=depth,
            data={"id": start + idx}  # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞
        )] for idx, item in enumerate(slice_)
    ]

    # ‚Üê / ‚Üí –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row: List[Dict[str, Any]] = []
    if page > 0:
        nav_row.append(make_btn("‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", "faq_page", depth,
                                color=SECONDARY, data={"page": page - 1}))
    if page < max_page:
        nav_row.append(make_btn("–°–ª–µ–¥—É—é—â–∏–µ ‚û°", "faq_page", depth,
                                color=SECONDARY, data={"page": page + 1}))
    if nav_row:
        rows.append(nav_row)

    # —Ç–æ–ª—å–∫–æ ¬´–ù–∞–∑–∞–¥¬ª –∏–∑ —Ö–≤–æ—Å—Ç–∞
    rows.append(nav_tail(depth))  # depth=1 ‚Üí –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª

    return json.dumps({"buttons": rows, "one_time": False}, ensure_ascii=False)


def list_to_rows(items: List[Dict[str, Any]],
                 cmd: str,
                 depth: int,
                 key_name: str = "value") -> List[List[Dict[str, Any]]]:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ dict'–æ–≤ (directions/durations) –≤ —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫:
    –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ä—è–¥. cmd ‚Äì –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ payload
    """
    rows, row = [], []
    for it in items:
        label = f"{it[key_name]} ({it['count']})"
        row.append(make_btn(label, cmd, depth, data={"value": it[key_name]}))
        if len(row) == 2:  # 2 –∫–Ω–æ–ø–∫–∏ ‚Äì –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return rows


def kb_directions_menu(directions: List[Dict[str, Any]],
                       depth: int = 1) -> str:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    rows = list_to_rows(directions, "direction_selected", depth)
    rows.append(nav_tail(depth))  # ¬´–ù–∞–∑–∞–¥¬ª –ø–æ—è–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    return json.dumps({"buttons": rows, "one_time": False}, ensure_ascii=False)


def kb_durations_menu(durations: List[Dict[str, Any]],
                      depth: int = 1) -> str:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    rows = list_to_rows(durations, "duration_selected", depth)
    rows.append(nav_tail(depth))
    return json.dumps({"buttons": rows, "one_time": False}, ensure_ascii=False)


def kb_projects_page(projects: List[Dict[str, Any]],
                     page: int,
                     page_size: int,
                     depth: int,
                     extra_filter: Dict[str, str] | None = None) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤ (–ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª –∫–∞–∂–¥—ã–π).
    """
    rows = []
    for p in _paginate(projects, page, page_size):
        # –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ ‚Ä¶¬ª
        rows.append([
            make_btn(
                label=(p["title"][:36] + "‚Ä¶") if len(p["title"]) > 36 else p["title"],
                cmd="project_details",
                depth=depth,  # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ
                data={  # –ø–µ—Ä–µ–¥–∞—ë–º –ö–û–ù–¢–ï–ö–°–¢
                    "title": p["title"],
                    **(extra_filter or {}),
                    "page": page
                }
            )
        ])

    # –ö–Ω–æ–ø–∫–∏ ¬´‚Üê –ü—Ä–µ–¥¬ª | ¬´–°–ª–µ–¥ ‚Üí¬ª
    nav_row: List[Dict[str, Any]] = []
    if page > 0:
        # –ø–µ—Ä–µ–¥–∞—ë–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã + —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π page
        nav_row.append(
            make_btn("‚¨Ö –ü—Ä–µ–¥—ã–¥—É—â–∏–µ", "projects_page",
                     depth=depth,
                     color=SECONDARY,
                     data={"page": page - 1, **(extra_filter or {})})
        )
    if (page + 1) * page_size < len(projects):
        nav_row.append(
            make_btn("–°–ª–µ–¥—É—é—â–∏–µ ‚û°", "projects_page",
                     depth=depth,
                     color=SECONDARY,
                     data={"page": page + 1, **(extra_filter or {})})
        )
    if nav_row:
        rows.append(nav_row)

    # –î–æ–±–∞–≤–ª—è–µ–º ¬´–ù–∞–∑–∞–¥ / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
    tail = [make_btn("üîô –ù–∞–∑–∞–¥",
                     cmd="go_back",
                     depth=depth - 1,
                     color=NEGATIVE,
                     data={**(extra_filter or {}), "page": page})]
    if depth >= 2:  # –≥–ª—É–±–∏–Ω–∞ ‚â•2 ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
        tail.append(
            make_btn("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                     cmd="go_home",
                     depth=0,
                     color=SECONDARY)
        )
    rows.append(tail)
    return json.dumps({"buttons": rows, "one_time": False}, ensure_ascii=False)


# --------------------------------------------------------------------
# 7. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —Å–Ω–∞—Ä—É–∂–∏
# --------------------------------------------------------------------
__all__ = [
    "kb_main_menu",
    "kb_find_menu",
    "kb_faq_page",
    "kb_directions_menu",
    "kb_durations_menu",
    "kb_projects_page",
    "make_btn",
    "nav_tail",
    "list_to_rows",
    "PRIMARY",
    "SECONDARY",
    "POSITIVE",
    "NEGATIVE",
]
